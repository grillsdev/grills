/**
 * A dialog component for saving and creating themes with compact color picker.
 * Built using ShadCN UI Dialog and Sheet components.
 * GEnerated by out Platform itself
 */
import { experimental_useObject as useObject } from '@ai-sdk/react';
import useSWR from 'swr';
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogOverlay,
  DialogTitle,
  DialogHeader,
  DialogDescription,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { useState, useEffect, FormEvent } from "react";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetDescription,
  SheetFooter,
} from "@/components/ui/sheet";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { ChevronDown, ExternalLink, Loader2} from "lucide-react"


import { getApiKey, getSelectedModel, getLocalSavedTheme } from "@/lib/utils";
import { SavedTheme, themeSchema } from "@/lib/types";
import { toast } from "sonner";
import { getSavedTheme } from '@/lib/fetchers';

/**
 * Dialog component for managing saved themes and creating new themes
 */
export function ThemeDialog({ savedThemes, reload}: {savedThemes: SavedTheme[], reload: ()=>void}) {
  const [open, setOpen] = useState(false); // State to manage dialog open/close
  const [selectedTheme, setSelectedTheme] = useState<SavedTheme | null>(null); // State to track selected theme
  const [sheetOpen, setSheetOpen] = useState(false); // State to manage sheet open/close
  // const [newTheme, setNewTheme] = useState<Theme>({ id: "", name: "", color: "#000000", theme: "" }); // State for new theme data
   const { submit, isLoading } = useObject({
    api: '/api/theme',
    schema: themeSchema,
    onFinish({object, error}){
      console.log(error)
      if(!object?.isValid){
        toast.error(object?.error,{
          position: "top-center"
        })
      }else{
        setSheetOpen(false)
        reload()
      }
    }
  });

  const handleSaveTheme = (e:FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    const selectedModel = getSelectedModel()
    if(!selectedModel){
      return toast.error("Please select the model",{
        position:"top-center"
      })
    }
    const isSelectedModelAPIKeyAvail = getApiKey(selectedModel?.llm)
    if(!isSelectedModelAPIKeyAvail){
      return toast.error(`Please add the API key for ${selectedModel.llm}`,{
        position:"top-center"
      })
    }
    const form = e.currentTarget;
    const formData = new FormData(form);
    const themeData = formData.get('themeData') as string;

    if (!themeData.trim()) {
      alert('Theme cannot be empty.');
      return;
    }

    submit(themeData)
  }

  // Load selected theme from local storage on mount
  useEffect(() => {
    const savedTheme = getLocalSavedTheme()
    if (savedTheme) {
      setSelectedTheme(savedTheme);
    }
  }, []);

  // Handle theme selection
  const handleThemeSelect = (theme: SavedTheme) => {
    setSelectedTheme(theme);
    localStorage.setItem("selectedTheme", JSON.stringify(theme)); // Save selected theme ID to local storage
  };

  // Handle new theme creation
  const handleCreateTheme = () => {
    setSheetOpen(true);
  };


  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="ghost" className="font-light text-xs">
          Theme 
            <ChevronDown/>
        </Button>
      </DialogTrigger>
      <DialogOverlay />
      <DialogContent className="px-4 pt-7 pb-10">
        <DialogHeader>
          <DialogTitle>Select Theme</DialogTitle>
          <DialogDescription>
            Choose from your saved themes or create a new one.
          </DialogDescription>
        </DialogHeader>
        <div className="flex justify-between items-center mb-4">
          <Button variant="link" size="sm" onClick={handleCreateTheme} className="ml-auto font-light">
            Create Theme
          </Button>
        </div>
        <div className="grid grid-cols-2 gap-4 md:grid-cols-3 xl:grid-cols-4">
          {savedThemes.map((theme) => (
            <Button
              key={theme.id}
              variant="outline"
              size="lg"
              className="flex items-center justify-start"
              style={{ border: selectedTheme?.id === theme.id ? `2px solid ${theme.color}`: "" }}
              onClick={() => handleThemeSelect(theme)}
            >
              <span
                className="inline-block w-4 h-4 border-none rounded-full mr-0.5 "
                style={{ backgroundColor: theme.color }}
              />
              {theme.name.substring(0, 10)}
            </Button>
          ))}
        </div>
      </DialogContent>

      {/* Sheet for creating a new theme */}
      <Sheet open={sheetOpen} onOpenChange={setSheetOpen}>
        <SheetContent side="right" className="p-4">
          <SheetHeader>
            <SheetTitle>Create New Theme</SheetTitle>
            <SheetDescription ><a href="https://www.styleglide.ai/themes" target="_blank" className="text-xs font-medium hover:underline text-blue-400 cursor-pointer flex flex-row items-center gap-2">StyleGuide <ExternalLink width={14}/></a></SheetDescription>
          </SheetHeader>
            <form 
            onSubmit={handleSaveTheme}
            className="space-y-3 px-4">
              <Label htmlFor="theme-data">Theme </Label>
              <Textarea
                id="theme"
                name="themeData"
                placeholder={themePlaceholder}
                rows={4}
                className="overflow-auto h-[25rem] max-h-[25rem]"
                required
              />
              <SheetFooter className="">
            <Button type="submit" disabled={isLoading}>{isLoading&&(<Loader2 className='animate-spin'/>)} Save Theme</Button>
          </SheetFooter>
            </form>
        </SheetContent>
      </Sheet>
    </Dialog>
  )
}

/**
 * Wrapper component demonstrating the ThemeDialog usage
 */
function UserTheme() {
  const {data, mutate} = useSWR<SavedTheme[]>("/api/theme", getSavedTheme)

  const reload = () => {
    mutate()
  }

  return (
    <div className="">
      <ThemeDialog savedThemes={data || []} reload={reload} />
    </div>
  )
}

const themePlaceholder = `
:root {
  --base-50: oklch(0.9843 0.0031 253.87);
  --base-100: oklch(0.972 0.0062 255.47);
  --base-200: oklch(0.9287 0.0087 255.87);
  --base-300: oklch(0.8699 0.0099 256.06);
  --base-400: oklch(0.7049 0.0112 258.31);
  --base-500: oklch(0.5529 0.0121 259.08);
  --base-600: oklch(0.4459 0.0118 257.79);
  --base-700: oklch(0.3722 0.0109 258.11);
  --base-800: oklch(0.2786 0.0093 258.97);
  --base-900: oklch(0.2087 0.0087 261.4);
  --base-950: oklch(0.1293 0.0081 261.69);
  --base-1000: oklch(0.078 0.0074 261.25);

  --primary-50: oklch(0.9645 0.0106 283.77);
  --primary-100: oklch(0.9359 0.0197 284.44);
  --primary-200: oklch(0.8821 0.0382 284.32);
  --primary-300: oklch(0.7984 0.071 284.79);
  --primary-400: oklch(0.6882 0.1148 285.81);
  --primary-500: oklch(0.5961 0.1523 285.45);
  --primary-600: oklch(0.5436 0.1712 285.54);
  --primary-700: oklch(0.4751 0.161 285.34);
  --primary-800: oklch(0.416 0.1351 285.59);
  --primary-900: oklch(0.37 0.1057 286.74);
  --primary-950: oklch(0.2707 0.0738 286.53);
  --primary-1000: oklch(0.2063 0.0531 286.39);

  --secondary-50: oklch(0.9814 0.0123 175.92);
  --secondary-100: oklch(0.9511 0.0388 174.96);
  --secondary-200: oklch(0.9077 0.0715 175.07);
  --secondary-300: oklch(0.8511 0.0818 175.78);
  --secondary-400: oklch(0.7727 0.092 175.76);
  --secondary-500: oklch(0.7011 0.0996 175.92);
  --secondary-600: oklch(0.5985 0.0959 177.64);
  --secondary-700: oklch(0.5099 0.078 179.56);
  --secondary-800: oklch(0.4354 0.0632 181.21);
  --secondary-900: oklch(0.39 0.0511 182.01);
  --secondary-950: oklch(0.2721 0.036 184.95);
  --secondary-1000: oklch(0.1998 0.0262 185.85);

  --background: var(--base-50);
  --foreground: var(--base-800);
  --card: var(--color-white);
  --card-foreground: var(--base-800);
  --popover: var(--color-white);
  --popover-foreground: var(--base-800);
  --primary: var(--primary-600);
  --primary-foreground: var(--color-white);
  --secondary: var(--secondary-900);
  --secondary-foreground: var(--color-white);
  --muted: var(--base-100);
  --muted-foreground: var(--base-600);
  --accent: var(--base-100);
  --accent-foreground: var(--base-800);
  --destructive: oklch(0.577 0.245 27.325);
  --border: var(--base-200);
  --input: var(--base-300);
  --ring: var(--primary-600);
  --chart-1: var(--primary-600);
  --chart-2: var(--secondary-900);
  --chart-3: var(--primary-300);
  --chart-4: var(--secondary-300);
  --chart-5: var(--primary-100);
  --radius: 1rem;
  --sidebar: var(--color-white);
  --sidebar-foreground: var(--base-800);
  --sidebar-primary: var(--primary-600);
  --sidebar-primary-foreground: var(--color-white);
  --sidebar-accent: var(--base-50);
  --sidebar-accent-foreground: var(--base-800);
  --sidebar-border: var(--base-200);
  --sidebar-ring: var(--primary-600);
}

.dark {
  --background: var(--base-950);
  --foreground: var(--base-200);
  --card: var(--base-900);
  --card-foreground: var(--base-200);
  --popover: var(--base-900);
  --popover-foreground: var(--base-200);
  --primary: var(--primary-600);
  --primary-foreground: var(--color-white);
  --secondary: var(--secondary-900);
  --secondary-foreground: var(--color-white);
  --muted: var(--base-800);
  --muted-foreground: var(--base-300);
  --accent: var(--base-800);
  --accent-foreground: var(--base-200);
  --destructive: oklch(0.704 0.191 22.216);
  --border: var(--base-800);
  --input: var(--base-700);
  --ring: var(--primary-600);
  --chart-1: var(--primary-600);
  --chart-2: var(--secondary-900);
  --chart-3: var(--primary-300);
  --chart-4: var(--secondary-300);
  --chart-5: var(--primary-100);
  --sidebar: var(--base-900);
  --sidebar-foreground: var(--base-200);
  --sidebar-primary: var(--primary-600);
  --sidebar-primary-foreground: var(--color-white);
  --sidebar-accent: var(--base-800);
  --sidebar-accent-foreground: var(--base-200);
  --sidebar-border: var(--base-800);
  --sidebar-ring: var(--primary-600);
}

@theme inline {
  --color-base-50: var(--base-50);
  --color-base-100: var(--base-100);
  --color-base-200: var(--base-200);
  --color-base-300: var(--base-300);
  --color-base-400: var(--base-400);
  --color-base-500: var(--base-500);
  --color-base-600: var(--base-600);
  --color-base-700: var(--base-700);
  --color-base-800: var(--base-800);
  --color-base-900: var(--base-900);
  --color-base-950: var(--base-950);
  --color-base-1000: var(--base-1000);

  --color-primary-50: var(--primary-50);
  --color-primary-100: var(--primary-100);
  --color-primary-200: var(--primary-200);
  --color-primary-300: var(--primary-300);
  --color-primary-400: var(--primary-400);
  --color-primary-500: var(--primary-500);
  --color-primary-600: var(--primary-600);
  --color-primary-700: var(--primary-700);
  --color-primary-800: var(--primary-800);
  --color-primary-900: var(--primary-900);
  --color-primary-950: var(--primary-950);
  --color-primary-1000: var(--primary-1000);

  --color-secondary-50: var(--secondary-50);
  --color-secondary-100: var(--secondary-100);
  --color-secondary-200: var(--secondary-200);
  --color-secondary-300: var(--secondary-300);
  --color-secondary-400: var(--secondary-400);
  --color-secondary-500: var(--secondary-500);
  --color-secondary-600: var(--secondary-600);
  --color-secondary-700: var(--secondary-700);
  --color-secondary-800: var(--secondary-800);
  --color-secondary-900: var(--secondary-900);
  --color-secondary-950: var(--secondary-950);
  --color-secondary-1000: var(--secondary-1000);

  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}
`
export default UserTheme

